/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            enabled: false
        ]
    }

}

/////////////
// FILE QC //
/////////////

// FASTQC
if (!params.skip_qc && !params.skip_fastqc) {

    process {
        withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
            ext.args = '--quiet'
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/pre_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        if (!params.skip_fastp) {
            withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
                ext.args = '--quiet'
                ext.prefix = { "${meta.id}.trimmed" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/fastqc/post_trim" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

// FASTP
if (!params.skip_fastp) {

    process {
        withName: '.*:FASTQ_TRIM_FASTP_FASTQC:FASTP' {
            ext.prefix = { "${meta.id}_trimmed" }
            publishDir = [
                [
                    path: { "${params.outdir}/${meta.id}/qc/fastp" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{json,html}"
                ],
                [
                    path: { "${params.outdir}/${meta.id}/log/fastp" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log",
                    enabled: params.save_log
                ],
                [
                    path: { "${params.outdir}/${meta.id}/qc/fastp" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fail.fastq.gz",
                    enabled: params.save_trimmed_fail
                ],
                [
                    path: { "${params.outdir}/${meta.id}/fastq/trimmed_fastp" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastp.fastq.gz"
                ]
            ]
        }
    }
}


/////////////////////////////////////
//  PREPROCESSING_REFERENCE_FILES  //
/////////////////////////////////////

process {
    withName: 'CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:PREPARE_REFERENCE_FILES:GISAID_MAKEBLASTDB' {
        ext.args = '-dbtype nucl'
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:PREPARE_REFERENCE_FILES:GUNZIP_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:PREPARE_REFERENCE_FILES:UNTAR_.*' {
        ext.args2 = '--no-same-owner'
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:PREPARE_REFERENCE_FILES:KMA_INDEX' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('kmaindex') ? 'kma_index' : null },
            enabled: params.save_reference
        ]
    }
}


if (!params.skip_genotyping && !params.skip_wholegenome_genotyping) {
    process {
        withName: '.*:PREPARE_REFERENCE_FILES:WHG_MAKEBLASTDB' {
            ext.args = '-dbtype nucl'
            publishDir = [
                path: { "${params.outdir}/genome/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

if (!params.skip_genotyping && !params.skip_ggene_genotyping) {
    process {
        withName: '.*:PREPARE_REFERENCE_FILES:GGENE_MAKEBLASTDB' {
            ext.args = '-dbtype nucl'
            publishDir = [
                path: { "${params.outdir}/genome/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}


///////////////
// ALIGNMENT //
///////////////

// KMA Alignment
process {

    withName: '.*:KMA_MAP' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/reference/kma/stat" },
                mode: params.publish_dir_mode,
                pattern: "*.res",
            ],
            [
                path: { "${params.outdir}/${meta.id}/log/kma" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
                enabled: params.save_log
            ]
        ]
    }

    withName: '.*:READ_KMA' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/reference/kma" },
                mode: params.publish_dir_mode,
                pattern: "*.{fasta,gff}",
            ],
            [
                path: { "${params.outdir}/${meta.id}/reference/kma" },
                mode: params.publish_dir_mode,
                pattern: "*.vars",
                saveAs: { filename -> filename.equals('env.vars') ? 'annotation.env' : null },
            ]
        ]
    }
}

// STAR ALIGNMENT
process {

    withName: '.*:STAR_GENOMEGENERATE' {
        ext.args = { "--genomeSAindexNbases ${params.genomeSAindexNbases}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:STAR_ALIGN' {
        ext.args = {
            [
                "--runMode alignReads",
                "--outSAMtype BAM Unsorted",
                "--readFilesCommand zcat",
                "--runRNGseed 0",
                "--outFilterMismatchNmax 5",
                "--outFilterMismatchNoverLmax 0.05",
                "--scoreGap -2",
                "--scoreGapNoncan -4",
                "--outFilterScoreMin 15",
                "--outFilterScoreMinOverLread 0.3",
                "--alignIntronMax 2000",
                "--alignIntronMin 20",
                "--outFilterMultimapNmax 10",
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(" \\\n        ")
        }
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/log/star" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}',
                enabled: params.save_log
            ],
            [
                path: { "${params.outdir}/${meta.id}/fastq/" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }
}

// BLAST ALIGNMENT
process {

    withName: '.*:BLAST_GISAID' {
        ext.prefix = { "${meta.id}.gisaid" }
        ext.args = {
            [
                "-outfmt 6",
                "-evalue 1e-5",
                "-perc_identity 90"
            ].join(" \\\n        ")
        }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/GISAID/blastn" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


// SAMTOOLS ALIGNMENT QC
process {

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.star" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc/samtools/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

////////////////////
// BAM PROCESSING //
////////////////////

process {

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////////////
// GENOME ASSEMBLY //
/////////////////////

process {

    withName: '.*:IGVTOOLS_COUNT' {
        ext.args = '-z 5 -w 1'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:ASSEMBLE_SEQUENCE' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly/fasta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


/////////////////////
// VARIANT CALLING //
/////////////////////

// SAMTOOLS MPILEUP
process {
    withName: '.*:SAMTOOLS_MPILEUP' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variant_calling/mpileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// NEXTCLADE
process {
    // NextClade Get Dataset
    withName: '.*:NEXTCLADE_DATASETGET' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:NEXTCLADE_RUN' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variant_calling/nextclade" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith(".csv") && !filename.endsWith("errors.csv") && !filename.endsWith("insertions.csv") ? filename : null }
        ]
    }
}


////////////////
// GENOTYPING //
////////////////

if (!params.skip_genotyping && !params.skip_wholegenome_genotyping) {

    process {

        withName: '.*:RSV_WHOLEGENOME_GENOTYPING:BLASTN_GENOTYPING' {
            ext.prefix = { "${meta.id}.whg" }
            ext.args = {
                [
                    "-outfmt 6",
                    "-evalue 1e-5",
                    "-perc_identity 90"
                ].join(" \\\n        ")
            }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genotyping/wholegenome/blastn" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:RSV_WHOLEGENOME_GENOTYPING:PARSE_BLASTN' {
            ext.prefix = { "${meta.id}.whg" }
            publishDir = [
                [
                    path: { "${params.outdir}/${meta.id}/genotyping/wholegenome" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt'
                ],
                [
                    path: { "${params.outdir}/${meta.id}/log/parse_wholegenome_blast" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log',
                    enabled: params.save_log
                ]
            ]
        }
    }
}


if (!params.skip_genotyping && !params.skip_ggene_genotyping) {

    process {

        withName: '.*:RSV_GGENE_GENOTYPING:EXTRACT_GENE_SEQUENCES' {
            publishDir = [
                [
                    path: { "${params.outdir}/${meta.id}/genotyping/ggene/fasta" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fasta"
                ],
                [
                    path: { "${params.outdir}/${meta.id}/log/extract_ggene" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log",
                    enabled: params.save_log
                ]
            ]
        }

        withName: '.*:RSV_GGENE_GENOTYPING:BLASTN_GENOTYPING' {
            ext.prefix = { "${meta.id}.gg" }
            ext.args = {
                [
                    "-outfmt 6",
                    "-evalue 1e-5",
                    "-perc_identity 90"
                ].join(" \\\n        ")
            }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genotyping/ggene/blastn" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:RSV_GGENE_GENOTYPING:PARSE_GGENE_BLASTN' {
            ext.prefix = { "${meta.id}.gg" }
            publishDir = [
                [
                    path: { "${params.outdir}/${meta.id}/genotyping/ggene" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt'
                ],
                [
                    path: { "${params.outdir}/${meta.id}/log/parse_ggene_blast" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log',
                    enabled: params.save_log
                ]
            ]
        }
    }
}

////////////////////
// PHYLOGENY TREE //
////////////////////

if (!params.skip_genotyping && (!params.skip_wholegenome_genotyping || !params.skip_ggene_genotyping)) {
    process {
        // CAT_FASTA
        withName: '.*:CAT_FASTA' {
            publishDir = [
                enabled: false
            ]
        }
    }
}

if (!params.skip_genotyping && !params.skip_wholegenome_genotyping) {

    process {
        // MAFFT ALIGNMENT
        withName: '.*:PHY_WHG_TREE:MAFFT_ALIGN' {
            ext.prefix = { "${meta.id}.whg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/wholegenome/mafft" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // FASTTREE
        withName: '.*:PHY_WHG_TREE:FASTTREE' {
            ext.args = "-gtr"
            ext.prefix = { "${meta.id}.whg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/wholegenome/fasttree" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // VISUALIZATION
        withName: '.*:PHY_WHG_TREE:VISUALIZE_PHYLOGENETIC_TREE' {
            ext.prefix = { "${meta.id}.whg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/wholegenome/visualization" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_genotyping && !params.skip_ggene_genotyping) {

    process {

        // MAFFT ALIGNMENT
        withName: '.*:PHY_GGENE_TREE:MAFFT_ALIGN' {
            ext.prefix = { "${meta.id}.gg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/ggene/mafft" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // FASTTREE
        withName: '.*:PHY_GGENE_TREE:FASTTREE' {
            ext.args = "-gtr"
            ext.prefix = { "${meta.id}.gg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/ggene/fasttree" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // VISUALIZATION
        withName: '.*:PHY_GGENE_TREE:VISUALIZE_PHYLOGENETIC_TREE' {
            ext.prefix = { "${meta.id}.gg" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/phylogeny_tree/ggene/visualization" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


/////////////
// MULTIQC //
/////////////

if (!params.skip_qc && !params.skip_multiqc) {
    process {
        withName: '.*:MULTIQC_FINALQC' {
            ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/final_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:MULTIQC_RAWQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/raw_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
